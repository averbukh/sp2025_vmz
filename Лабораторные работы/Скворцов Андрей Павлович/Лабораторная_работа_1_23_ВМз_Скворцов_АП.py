# -*- coding: utf-8 -*-
"""МиСОС_Лабораторная_1_СкворцовАП.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Id93jf2v68zU8qQPuJY1NBYAweta2Lk4
"""

import numpy as np
import re as regexp
import matplotlib.pyplot as plt
from PIL import Image
import io
import math
import os

print("Лабораторная работа №1")
print("Уравнение: y(x) = a1 * sin(b1 * x) + a2 * sin(b2 * x) + a3 * sin(b3 * x)")
print("\nВвод значений: ")
args = np.zeros(9, dtype="float32")
argsName = ['a1', 'b1', 'a2', 'b2', 'a3', 'b3', 'x0 (начальное значение)', 'xk (конечное значение)', 'dx (шаг)']
i = 0
# Ввод значений
while i < len(argsName):
  try:
      value = input(f"{argsName[i]} = ").strip().replace(',', '.')
      # Проверка что введена цифра
      if not regexp.match(r'^[-]?[0-9]*\.?[0-9]+$', value):
          print("Ошибка. Необходимо ввести число")
          continue
      args[i] = float(value)
      if i == len(argsName) - 2:
        if (args[i-1] > args[i]):
          print("Необходимо ввести значение xk равное или больше начального значения x0!")
          continue
      i = i + 1
  except ValueError:
      print("Ошибка. Введите число")

# вычисление значений x
x0 = args[len(args)-3]
xk = args[len(args)-2]
dx = args[len(args)-1]
x = np.zeros(int(((xk-x0)/dx) + 1), dtype="float32")
x[0] = x0
for i in range(1, int(((xk-x0)/dx) + 1)):
  if x[i] + dx > xk:
    x[i] = xk
  else:
    x[i] = x[i-1] + dx
  i = i + 1
if x[len(x)-1] != xk:
  xt = np.append(x, xk)
  x = xt

# вычисление значений y
y = np.zeros(len(x))
for i in range(len(x)):
  #y(x) = a1 * sin(b1 * x) + a2 * sin(b2 * x) + a3 * sin(b3 * x)
  y[i] = args[0] * math.sin(args[1] * x[i]) + args[2] * math.sin(args[3] * x[i]) + args[3] * math.sin(args[4] * x[i])

# вывод таблицы
print("x\t\ty")
for i in range(len(x)):
  print(f"{x[i]:.5f}\t{y[i]:.5f}")

# Построение графика
plt.figure(figsize=(12, 8))
plt.plot(x, y, label=f'y(x) = {args[0]} * sin({args[1]} * x) + {args[2]} * sin({args[3]} * x) + {args[4]} * sin({args[5]} * x)', color='blue', linewidth=3)
plt.axhline(0, color='black', linewidth=1)
plt.axvline(0, color='black', linewidth=1)
plt.grid(True, alpha=0.3)
plt.legend(fontsize=12)
plt.title(f'График функции: y(x) = {args[0]} * sin({args[1]} * x) + {args[2]} * sin({args[3]} * x) + {args[4]} * sin({args[5]} * x)', fontsize=14)
plt.xlabel('x', fontsize=12)
plt.ylabel('y', fontsize=12)

flag = True
print("Форматы сохранения графика:\n1 - .bmp (растровый формат)\n2 - .svg (векторный формат)")
choice = 0
while flag:
  choice = int(input("Выберите формат: "))
  if choice != 1 and choice != 2:
    print("Введите 1 или 2.")
    continue
  else:
    flag = False

if choice == 1:
  ftype = "bmp"
else:
  ftype = "svg"

filename = f"graph."

# Сохраняем SVG
if ftype == "svg":
  plt.savefig(f"{filename}{ftype}", format=f"{ftype}", dpi=120, bbox_inches='tight')
  plt.close()
elif ftype == "bmp":
  # Сохраняем PNG
  ftype = "png"
  plt.savefig(f"{filename}{ftype}", format=f"{ftype}", dpi=120, bbox_inches='tight')
  plt.close()
  # Конвертируем PNG в BMP
  img = Image.open(f"{filename}{ftype}")
  ftype = "bmp"
  img.save(f"{filename}{ftype}", 'BMP')
  os.remove(f"{filename}png")

print(f"✓ График успешно сохранен в файл: {filename}{ftype}")
print("Готово!")